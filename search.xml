<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[分布式架构——第4篇：构建ZooKeeper伪分布式集群]]></title>
    <url>%2Fzh-CN%2Fzookeeper-pseudo-distributed.html</url>
    <content type="text"><![CDATA[根据Zab协议的$2*n+1$的原则（超过半数），ZooKeeper至少需要3台以上的机器才能构成集群。对于手中目前没有多台机器的，可以使用虚拟机技术、容器技术或者是本文将要介绍的多端口伪分布式技术。 配置zoo.cfg文件由于我只有一台服务器，只有一个IP地址，以下采用多端口运行多个ZooKeeper构建伪分布式集群。 将zoo.cfg文件拷贝3份，分别命名为zoo1.cfg、zoo2.cfg、zoo3.cfg。其中，zoo1.cf内容如下。这里主要注意几处：dataDir、clientPort每个配置必须不同。server每个配置必须相同。 注意： server的格式为server.ID=IP:PORT1:PORT2，ID是当前服务器的编号、IP这里由于是伪分布式全部是同一台，PORT1是用于leader与follower通信使用的，PORT2是供选举使用。 zoo1.cfg tickTime=2000initLimit=10syncLimit=5dataDir=/home/byteparallel/Applications/zookeeper/zookeeper-3.4.12/data1clientPort=2181server.1=127.0.0.1:2887:3887server.2=127.0.0.1:2888:3888server.3=127.0.0.1:2889:3889 zoo2.cfg tickTime=2000initLimit=10syncLimit=5dataDir=/home/byteparallel/Applications/zookeeper/zookeeper-3.4.12/data2clientPort=2182server.1=127.0.0.1:2887:3887server.2=127.0.0.1:2888:3888server.3=127.0.0.1:2889:3889 zoo3.cfg tickTime=2000initLimit=10syncLimit=5dataDir=/home/byteparallel/Applications/zookeeper/zookeeper-3.4.12/data3clientPort=2183server.1=127.0.0.1:2887:3887server.2=127.0.0.1:2888:3888server.3=127.0.0.1:2889:3889 此时，应该是这个状态：byteparallel@server:~/Applications/zookeeper/zookeeper-3.4.12/conf$ lsconfiguration.xsl log4j.properties zoo1.cfg zoo2.cfg zoo3.cfg zoo_sample.cfg 创建data文件夹data文件夹的具体路径，以及名字，与上文中的zoo.cfg配置文件保持一致即可。byteparallel@server:~/Applications/zookeeper/zookeeper-3.4.12$ lsbin data1 docs LICENSE.txt README_packaging.txt zookeeper-3.4.12.jar.ascbuild.xml data2 ivysettings.xml log recipes zookeeper-3.4.12.jar.md5conf data3 ivy.xml NOTICE.txt src zookeeper-3.4.12.jar.sha1contrib dist-maven lib README.md zookeeper-3.4.12.jar 这里直接在主目录下创建了3个data文件夹，分别命名为data1、data2以及data3。接着，分别在这3个data文件夹，并创建myid文件并输入当前服务器的ID（注意与zoo.cfg保持一致）。$ echo 1 &gt;&gt; data1/myid$ echo 2 &gt;&gt; data2/myid$ echo 3 &gt;&gt; data3/myid 启动ZooKeeper集群集群需要全部服务器启动之后，使用./zkServer.sh status查询ZooKeeper状态才会正常。byteparallel@server:~/Applications/zookeeper/zookeeper-3.4.12/bin$ ./zkServer.sh start zoo1.cfgbyteparallel@server:~/Applications/zookeeper/zookeeper-3.4.12/bin$ ./zkServer.sh start zoo2.cfgbyteparallel@server:~/Applications/zookeeper/zookeeper-3.4.12/bin$ ./zkServer.sh start zoo3.cfg 可以分别查询每个服务器的状态，byteparallel@server:~/Applications/zookeeper/zookeeper-3.4.12/bin$ ./zkServer.sh status zoo1.cfgZooKeeper JMX enabled by defaultUsing config: /home/byteparallel/Applications/zookeeper/zookeeper-3.4.12/bin/../conf/zoo1.cfgMode: follower Error contacting service. It is probably not running构建ZooKeeper伪分布式集群时，遇到了该异常，具体可以查阅参考文献。我是由于端口占用造成的该故障。 异常状态$ ./zkServer.sh status zoo1.cfgZooKeeper JMX enabled by defaultUsing config: /home/byteparallel/Applications/zookeeper/zookeeper-3.4.12/bin/../conf/zoo.cfgError contacting service. It is probably not running 解决方案首先，查看zoo1.cfg配置文件中的clientPort是否被占用。果然被占用了。$ netstat -lnp | grep 2181(Not all processes could be identified, non-owned process info will not be shown, you would have to be root to see it all.)tcp6 0 0 :::2181 :::* LISTEN 2615/java kill该进程byteparallel@server:~/Applications/zookeeper/zookeeper-3.4.12/bin$ kill 2615 References:1 ubuntu 查看端口被占用并处理2 配置zookeeper异常 Error contacting service. It is probably not running.以及java.net.ConnectException: 拒绝连接3 zookeeper 集群中当前zookeeper 状态查看4 ZooKeeper的安装]]></content>
      <categories>
        <category>System Architecture</category>
      </categories>
      <tags>
        <tag>ZooKeeper</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[分布式架构——第3篇：ZooKeeper第三方客户端工具包zkClient]]></title>
    <url>%2Fzh-CN%2Fzookeeper-zkclient.html</url>
    <content type="text"><![CDATA[zkClient解决了watcher的一次性注册问题，将znode的事件重新定义为子节点的变化、数据的变化、连接以及状态的变化三类，由zkClient统一将watcher的WatcherEvent转换到以上三种情况中去处理，watcher执行后重新读取数据的同时，再注册相同的watcher。zkClient是GitHub上的开源项目：https://github.com/sgroschupf/zkclient//$ git clone https://github.com/sgroschupf/zkclient.git 生成jar包zkclient在GitHub上只提供了源码，如果要使用它的话，需要自己将其制作成jar包。 创建一个java工程； 将git下来的src-&gt;main内容，复制粘贴进项目的src目录中； 将原来的zkClient项目依赖的lib全部引入进刚新建zkclient的项目； 生成jar包：Export-&gt;Java-&gt;JAR file-&gt;[命名]（假设命名为zkclient.jar）。 zkClient开发将生成的JAR file名字为zkclient.jar，以及ZooKeeper本来依赖的其他JAR全部导入新项目中，就可以开始开发了。zkClient主要实现了三个订阅事件： 子节点的变化zkClient.subscribeChildChanges(PATH, new IZkChildListener() &#123; @Override public void handleChildChange(String arg0, List&lt;String&gt; arg1) throws Exception &#123; System.out.println("handleChildChange"); &#125; &#125;); 数据的变化包括数据被删除、数据改变。 zkClient.subscribeDataChanges(PATH, new IZkDataListener() &#123; @Override public void handleDataDeleted(String arg0) throws Exception &#123; System.out.println("handleDataDeleted"); &#125; @Override public void handleDataChange(String arg0, Object arg1) throws Exception &#123; System.out.println("handleDataChange"); &#125; &#125;); 连接以及状态的变化包括状态改变、Session建立出错、新建Session。 zkClient.subscribeStateChanges(new IZkStateListener() &#123; @Override public void handleStateChanged(KeeperState arg0) throws Exception &#123; System.out.println("handleStateChanged"); &#125; @Override public void handleSessionEstablishmentError(Throwable arg0) throws Exception &#123; System.out.println("handleSessionEstablishmentError"); &#125; @Override public void handleNewSession() throws Exception &#123; System.out.println("handleNewSession"); &#125; &#125;); 附录package org.byteparallel.zkclient;import java.util.List;import org.I0Itec.zkclient.IZkChildListener;import org.I0Itec.zkclient.IZkDataListener;import org.I0Itec.zkclient.IZkStateListener;import org.I0Itec.zkclient.ZkClient;import org.apache.zookeeper.CreateMode;import org.apache.zookeeper.Watcher.Event.KeeperState;public class ZooKeeperClient &#123; private static final String serverList = "192.168.1.102"; private static final String PATH = "/root"; public static void main(String[] args) &#123; ZkClient zkClient = new ZkClient(serverList); zkClient.subscribeChildChanges(PATH, new IZkChildListener() &#123; @Override public void handleChildChange(String arg0, List&lt;String&gt; arg1) throws Exception &#123; System.out.println("handleChildChange"); &#125; &#125;); zkClient.subscribeDataChanges(PATH, new IZkDataListener() &#123; @Override public void handleDataDeleted(String arg0) throws Exception &#123; System.out.println("handleDataDeleted"); &#125; @Override public void handleDataChange(String arg0, Object arg1) throws Exception &#123; System.out.println("handleDataChange"); &#125; &#125;); zkClient.subscribeStateChanges(new IZkStateListener() &#123; @Override public void handleStateChanged(KeeperState arg0) throws Exception &#123; System.out.println("handleStateChanged"); &#125; @Override public void handleSessionEstablishmentError(Throwable arg0) throws Exception &#123; System.out.println("handleSessionEstablishmentError"); &#125; @Override public void handleNewSession() throws Exception &#123; System.out.println("handleNewSession"); &#125; &#125;); if (!zkClient.exists(PATH))&#123; zkClient.createPersistent(PATH); &#125; if (!zkClient.exists(PATH+"/child"))&#123; zkClient.create(PATH+"/child", "child znode", CreateMode.EPHEMERAL); &#125; List&lt;String&gt; children = zkClient.getChildren(PATH); System.out.println(children.toString()); int childCount = zkClient.countChildren(PATH); System.out.println(childCount); zkClient.writeData(PATH+"/child", "hello everyone"); Object obj = zkClient.readData(PATH+"/child"); System.out.println(obj); zkClient.delete(PATH+"/child"); &#125;&#125; Reference:大型分布式网站架构与实践]]></content>
      <categories>
        <category>System Architecture</category>
      </categories>
      <tags>
        <tag>ZooKeeper</tag>
        <tag>zkClient</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ssh配置以及远程文件传输]]></title>
    <url>%2Fzh-CN%2Fssh-config-remote-file.html</url>
    <content type="text"><![CDATA[Secure Shell（安全外壳协议，简称SSH）是一种加密的网络传输协议，可在不安全的网络中为网络服务提供安全的传输环境。Ubuntu缺省已经安装了ssh客户端。但是并没有安装服务端。 通过以下命令安装ssh服务端（默认自动启动）。$ sudo apt-get install openssh-server ssh登录远程服务器举个栗子$ ssh byteparallel@192.168.1.102 注意：如果出现这样的警告WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!。说明你以前连接过远程服务器，但是远程服务器又重装了系统，这时候你本地的密钥已经失效了。你需要删除该文件。$ rm ~/.ssh/known_hosts 远程文件传输在linux下一般用scp这个命令来通过ssh传输文件。 从服务器上下载文件 $ scp username@servername:/path/filename /var/www/local_dir（本地目录） 上传本地文件到服务器 $ scp /path/filename username@servername:/path 从服务器下载整个目录 $ scp -r username@servername:/var/www/remote_dir/（远程目录） /var/www/local_dir（本地目录） 上传目录到服务器$ scp -r local_dir username@servername:remote_dir 注意： 目标服务器要开启写入权限。 References:1 利用ssh传输文件]]></content>
      <categories>
        <category>Coding Interviews</category>
      </categories>
      <tags>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于Ubuntu修改用户名造成无法登录的补救措施]]></title>
    <url>%2Fzh-CN%2Fubuntu-modify-username.html</url>
    <content type="text"><![CDATA[在进行今天的这波操作修改用户名之前，参考的是《Ubuntu下更改用户名和主机名》以及《Ubuntu 修改用户名》这两篇文章。不慎的是，在修改文件之时，没有将/etc/passwd中的所有旧用户名替换为新的。 修改之前：bytesint:x:1000:1000:bytesint:/home/bytesint:/bin/bash 失误之处：byteparallel:x:1000:1000:bytesint:/home/bytesint:/bin/bash 看到上面的失误之处就已经明白了。我本来是想将用户名修改为byteparallel，结果只修改了最前面的地方。后面还有两处没修改。 正是因为这个原因，造成重启之后，系统无法正常登录了。然后，使用root账户在图形界面竟然也无法登录。 补救措施：万幸的是，我有提前设置root密码。（注意root密码如果没有手动设置的话，每次都是随机生成的）。 Step1: 按住Ctrl+Alt+F2切换到非图形终端。一般来说，F1是图形终端，F2~F7是非图形终端。 Step2: 登录root账户。 Step3: 完成未尽事宜。 Step4: reboot，一切OK。 小结 类似于修改用户名，这种需要更改大量文件内容的操作。最好不要手动去一个个修改，而应该用替换命令。对于vim，其实还有这样的操作： 在全文中将aaa替换为bbb:%s/aaa/bbb/g 在当前行中将ccc替换为ddd:s/ccc/ddd/g]]></content>
      <categories>
        <category>Coding Interviews</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[分布式架构——第2篇：ZooKeeper API实战]]></title>
    <url>%2Fzh-CN%2Fzookeeper-api-in-action.html</url>
    <content type="text"><![CDATA[ZooKeeper每个节点（称为znode），除了本身拥有一部分数据外（&lt;1M）,还能拥有子节点，当子节点上数据发生变化，或者其子节点发生变化时，基于Watcher机制会发出相应的通知给订阅其状态变化的客户端。 导入jar包通过MyEclispe-&gt;Build Path-&gt;Add External Archives…将以下两个目录中的jar包全部导入工程。zookeeper-3.4.12/zookeeper-3.4.12/lib 实现Watcher接口public class ZooKeeperWatcher implements Watcher&#123; @Override public void process(WatchedEvent event) &#123; switch (event.getType()) &#123; case NodeDeleted: System.out.println("Node Deleted"); break; case NodeChildrenChanged: System.out.println("Node Children Changed"); break; case NodeCreated: System.out.println("Node Created"); break; case NodeDataChanged: System.out.println("Node Data Changed"); break; default: System.out.println("Node Watcher Event(default)"); break; &#125; &#125;&#125; 设置host。这里再配置一下log4j，不然console会有警告出现。private static final String host = "127.0.0.1";//BasicConfigurator.configure();//log4j ZooKeeper API实战主要包括以下几个常用API：exists, create, getData, setData, delete。 create一般，create之前需要判断存在性，如果不存在exist返回的Stat会为null。ZooKeeper zooKeeper = new ZooKeeper(host, 5000, new ZooKeeperWatcher());Stat stat = zooKeeper.exists("/root", new ZooKeeperWatcher());if (stat == null) &#123; zooKeeper.create("/root", "root data".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);&#125; getDatagetData所获得的数据为byte[]，需要转化为String才能正常显示。注意：每个znode上存储的数据不大于1M。byte[] data = zooKeeper.getData("/root", new ZooKeeperWatcher(), stat);String str = new String(data);System.out.println(str); setData第二个参数为版本号，-1表示匹配所有版本。zooKeeper.setData("/root", "hello".getBytes(), -1); delete同上。zooKeeper.delete("/root", -1); ZooKeeper节点发现ZooKeeper本身会创建一些节点，同时节点会被固化到硬盘。 关于ZooKeeper自动生成的节点主要有三个节点：/, /zookeeper, /zookeeper/quota。注意：这里的root节点是上面的代码创建的，本来是不存在的。[zk: localhost:2181(CONNECTED) 3] ls /[zookeeper, root][zk: localhost:2181(CONNECTED) 4] ls /zookeeper[quota] 分别获取/,/zookeeper以及/zookeeper/quota中的数据，发现均为空。data = zooKeeper.getData("/", new ZooKeeperWatcher(), stat);str = new String(data);System.out.println("["+str+"]");//zookeeperdata = zooKeeper.getData("/zookeeper", new ZooKeeperWatcher(), stat);str = new String(data);System.out.println("["+str+"]");//zookeeper/quotadata = zooKeeper.getData("/zookeeper/quota", new ZooKeeperWatcher(), stat);str = new String(data);System.out.println("["+str+"]"); 控制台输出为[][][] znode是否被存到了硬盘？这里使用zkServer.sh停止了ZooKeeper之后，又重新启动。$ ./zkServer.sh stop$ ./zkServer.sh start 然后，使用zkCli进行一番查看，发现之前注册的root节点依然存在。因此，可以初步判断，节点是被存储于硬盘中的，而非仅位于内存中。$ ./zkCli.sh 但是，这里需要注意创建节点类型应该为CreateMode.PERSISTENT。 附录package com.soa.zookeeper;import org.apache.log4j.BasicConfigurator;import org.apache.zookeeper.CreateMode;import org.apache.zookeeper.WatchedEvent;import org.apache.zookeeper.Watcher;import org.apache.zookeeper.ZooDefs.Ids;import org.apache.zookeeper.ZooKeeper;import org.apache.zookeeper.data.Stat;public class ZooKeeperWatcher implements Watcher&#123; @Override public void process(WatchedEvent event) &#123; switch (event.getType()) &#123; case NodeDeleted: System.out.println("Node Deleted"); break; case NodeChildrenChanged: System.out.println("Node Children Changed"); break; case NodeCreated: System.out.println("Node Created"); break; case NodeDataChanged: System.out.println("Node Data Changed"); break; default: System.out.println("Node Watcher Event(default)"); break; &#125; &#125; private static final String host = "127.0.0.1"; public static void main(String[] args) throws Exception &#123; //BasicConfigurator.configure();//log4j ZooKeeper zooKeeper = new ZooKeeper(host, 5000, new ZooKeeperWatcher()); Stat stat = zooKeeper.exists("/root", new ZooKeeperWatcher()); if (stat == null) &#123; zooKeeper.create("/root", "root data".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT); &#125; byte[] data = zooKeeper.getData("/root", new ZooKeeperWatcher(), stat); String str = new String(data); System.out.println(str); zooKeeper.setData("/root", "hello".getBytes(), -1); data = zooKeeper.getData("/root", new ZooKeeperWatcher(), stat); str = new String(data); System.out.println(str); stat = zooKeeper.exists("/root/child", new ZooKeeperWatcher()); if (stat == null) &#123; zooKeeper.create("/root/child", "root child data".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT); &#125; data = zooKeeper.getData("/root/child", new ZooKeeperWatcher(), stat); str = new String(data); System.out.println(str); zooKeeper.delete("/root/child", -1); zooKeeper.delete("/root", -1); &#125;&#125; References:1 log4j WARN 和 SLF4J WARN 解决办法2 Java中String和byte[]间的转换浅析3 大型分布式网站架构设计与实践]]></content>
      <categories>
        <category>System Architecture</category>
      </categories>
      <tags>
        <tag>ZooKeeper</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[分布式架构——第1篇：ZooKeeper安装]]></title>
    <url>%2Fzh-CN%2Fzookeeper-install-conf.html</url>
    <content type="text"><![CDATA[ZooKeeper是一个针对于大型分布式系统分的可靠的协调系统，其核心类似于一个精简的文件系统，主要包括两个阶段：leader election阶段和Atomic broadcas阶段。 下载ZooKeeperhttps://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/ 注意：请确保电脑中已经有JDK环境。 解压ZooKeeper并配置环境变量$ sudo vim /etc/profile export ZOOKEEPER_INSTALL=/home/bytesint/Applications/zookeeper/zookeeper-3.4.12export PATH=$PATH:$ZOOKEEPER_INSTALL/bin 配置ZooKeeper$ cd ~/Applications/zookeeper/zookeeper-3.4.12/conf$ cp zoo_sample.cfg zoo.cfg$ vim zoo.cfg dataDir=/tmp/ZooKeeper/datadataLogDir=/tmp/ZooKeeper/log$ mkdir -p /tmp/ZooKeeper/data$ mkdir -p /tmp/ZooKeeper/log 启动ZooKeeper$ cd ~/Applications/zookeeper/zookeeper-3.4.12/bin/$ ./zkServer.sh start 查看ZooKeeper状态$ ./zkCli.sh [zk: localhost:2181(CONNECTED) 0] help[zk: localhost:2181(CONNECTED) 1] ls /[zookeeper] References:1 https://zookeeper.apache.org/doc/r3.4.13/zookeeperOver.html2 大型分布式网站架构设计与实践]]></content>
      <categories>
        <category>System Architecture</category>
      </categories>
      <tags>
        <tag>ZooKeeper</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[分布式架构——第0篇：VMware环境配置]]></title>
    <url>%2Fzh-CN%2Fvmware-ubuntu-env-config.html</url>
    <content type="text"><![CDATA[本文主要介绍在VMware中安装MyEcplise CI 2018，安装多版本JDK以及Tomcat。在虚拟机中安装Ubuntu之前，首先需要明确电脑有几个CPU，是几核几线程？ CPU个数、几核以及几线程？本文主机为Windows环境，在Windows中查看系统CPU个数，只需在cmd命令中输入systeminfo。 cmd-&gt;systeminfo 查看CPU核心数、线程数： cmd-&gt;wmic-&gt;cpu get 在cmd命令中输入wmic，然后在出现的新窗口中输入cpu get。 NumberOfCores：表示CPU核心数 NumberOfLogicalProcessors：表示CPU线程数 多版本JDK安装tar 命令： tar -zxvf file_name递归创建jvm目录，将解压后的JDK包全部拷贝进该路径下。 $ mkdir -p ~/Applications/jvm 同样的方法安装JDK8，JDK11。注意：用此方法，不需要配置JAVA_HOME。 $ sudo update-alternatives --install /usr/bin/java java ~/Applications/jvm/jdk-10.0.2/bin/java 310$ sudo update-alternatives --install /usr/bin/javac javac ~/Applications/jvm/jdk-10.0.2/bin/javac 310$ sudo update-alternatives --install /usr/bin/jar jar ~/Applications/jvm/jdk-10.0.2/bin/jar 310 自动切换版本： $ sudo update-alternatives --config java 查看当前JDK版本：（这里注意，version前是1个横杠） $ java -version 关于MyEclipse启动器创建在启动器中可以右击，Add to Favorites，这样就可以在Dock中显示了。 $ sudo vim /usr/share/applications/myeclipseci.desktop [Desktop Entry]Encoding=UTF-8Name=MyEclipse CIComment=MyEclipse IDEExec=~/Applications/myeclipseci/myeclipseIcon=~/Applications/myeclipseci/icon.xpmTerminal=falseStartupNotify=falseType=ApplicationCategories=Application;Development; 建议：最好安装在/home目录下，不然各种权限问题（不仅会造成激活失败，还可能使得软件无法启动）。本文就在Home目录下创建了Applications目录专门用来安装软件。 对MyEclispe的一些优化 关闭updating indexes Window-&gt;Preferences-&gt;Maven-&gt;Download repository index updates on startup 配置utf-8编码 Window-&gt;Preferences-&gt;General-&gt;Workspace-&gt;[UTF-8, Unix] 配置JDK Window-&gt;Preferences-&gt;Java-&gt;Installed JREs-&gt;Add.. 配置tomcat Windows-&gt;Preferences-&gt;Servers-&gt;Runtime Environments-&gt;tomcat[8,8.5,9] 显示Servers Windows-&gt;Show View-&gt;Other…-&gt;Java EE-&gt;Servers 新建Server 右击底部Servers面板-&gt;New-&gt;Server 附录VM Tools解压提示空间不足，先查看内存，如果确实不足，请拷贝至其他目录下进行解压。$ df -h JDK10以上貌似不支持-JAR命令，请切换回JDK8。 安装nodejs并更新$ sudo apt install nodejs$ sudo apt install npm$ npm install -g n$ n latest 安装hexo$ npm install -g hexo-cli ubuntu启动时报错。 piix4_smbus: Host SMBus controller not enabled!解决方案：打开blacklist.conf在文件尾部添加一句blacklist i2c_piix4$ sudo /etc/modprobe.d/blacklist.conf 重新生成引导$ sudo update-initramfs -u -k all 由于需要使用独立IP（直接链接物理网络，桥接模式）这时候，需要配置DHCP。首先查看网卡名称：ens33$ ifconfig ens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt; mtu 1500 inet 192.168.47.133 netmask 255.255.255.0 broadcast 192.168.47.255 inet6 fe80::20c:29ff:fedf:572d prefixlen 64 scopeid 0x20 ether 00:0c:29:df:57:2d txqueuelen 1000 (Ethernet) RX packets 760 bytes 413857 (413.8 KB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 593 bytes 132429 (132.4 KB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt; mtu 65536 inet 127.0.0.1 netmask 255.0.0.0 inet6 ::1 prefixlen 128 scopeid 0x10 loop txqueuelen 1000 (Local Loopback) RX packets 2043 bytes 131698 (131.6 KB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 2043 bytes 131698 (131.6 KB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 接着，配置DHCP，并重启网络。(在interfaces中添加以下内容) auto ens33iface ens33 inet dhcp $ sudo vim /etc/network/interfaces$ sudo /etc/init.d/networking restart 批量将文件夹设置为默认权限755，将文件设置为默认权限644。$ find . -type d -exec chmod 755 &#123;&#125; \;$ find . -type f -exec chmod 644 &#123;&#125; \; References:1 Windows下查看电脑的CPU个数，核心数，线程数2 关于VMware的桥接模式3 VMware虚拟机Ubuntu16.04桥接模式无法上网4 Ubuntu 通过umask设置默认文件权限644，目录权限755]]></content>
      <categories>
        <category>System Architecture</category>
      </categories>
      <tags>
        <tag>VMware</tag>
        <tag>MyEclipse</tag>
        <tag>JDK</tag>
        <tag>Tomcat</tag>
        <tag>nodejs</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搜索篇（1）Lucene全文检索工具库架构]]></title>
    <url>%2Fzh-CN%2Flucene-arch.html</url>
    <content type="text"><![CDATA[上一篇文章《搜索篇（0）Lucene环境配置》讲解了Lucene环境的配置，在本篇文章中将介绍一下它的架构。Lucene是一个采用纯JAVA实现的高性能、可扩展的信息检索开源工具库，在2001年成为开源组织Apache Jakarta的成员项目。需要强调的是，Lucene并不具备搜索引擎的完整特性，它只关注文本的索引和搜索，并提供了一套十分强大却又简单易用的核心API，隐藏了复杂的索引和搜索实现过程。所以可以简单的将Lucene视为应用程序下的一个接口层，如上图所示。 网络爬虫只为搜索引擎采集到海量文档信息，内容的有效检索还需要索引技术来实现。搜索引擎的索引器负责生成索引文件，其工作上下文结构如下图所示。其中，文本解析器主要包括中文分词、垃圾信息过滤等模块，而中文分词(Chinese Word Segmentation)是对信息处理的基础，如果没有中文分词，根本无法建立高效的索引结构。 References:[1] Michael McCandless, Erik Hatcher, and Otis Gospodnetić, Lucene in Action(Second Edition)[2] https://baike.baidu.com/item/Lucene ,2018-9-13[3] https://lucene.apache.org/core/7_4_0/index.html ,2018-9-13[4] DJ. QING, Android-based virtual chat robot development]]></content>
      <categories>
        <category>Artificial Intelligence</category>
      </categories>
      <tags>
        <tag>搜索引擎</tag>
        <tag>Lucene</tag>
        <tag>架构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搜索篇（0）Lucene环境配置]]></title>
    <url>%2Fzh-CN%2Flucene-env-config.html</url>
    <content type="text"><![CDATA[Lucene截止目前，最新版本为v7.4.0。它是一个开放源代码的全文检索引擎工具包，但它不是一个完整的全文检索引擎，而是一个全文检索引擎的架构，提供了完整的查询引擎和索引引擎，部分文本分析引擎（英文与德文两种西方语言）。本系列文章重点对Lucene全文检索工具库进行了分析，其中索引部分包括中文分词及其常见的分词器介绍、倒排索引的构建、索引结构的分析，检索部分涵盖了基本查询方式介绍、VSM评分机制、自定义排序方式以及与SQL查询异同比较；最后简单的介绍了Luke工具的使用。 配置Lucene开发环境 安装Java开发环境。（JDK 8 up） 下载Lucene：http://www.apache.org/dyn/closer.lua/lucene/java/7.4.0 在Eclipse（或MyEclipse[推荐]）中，创建项目名HelloLucene（推荐Web Project），引入Lucene JAR包。 注：Add External JARs…(右击项目-&gt;Build Path) 附录（配置git）作为一名程序员亦或是学生，从github上抄代码的能力不可或缺。以下为git配置命令，请将name、email设置成自己的~$ git config --global user.name &quot;qingdujun&quot;$ git config --global user.email &quot;123456@gmail.com&quot; 运行ssh-keygen命令后，直接一路敲击回车键即可。$ ssh-keygen -t rsa -C &quot;123456@gmail.com&quot; Generating public/private rsa key pair.Enter file in which to save the key (/home/qingdujun/.ssh/id_rsa):Created directory ‘/home/qingdujun/.ssh’.Enter passphrase (empty for no passphrase):Enter same passphrase again:Your identification has been saved in /home/qingdujun/.ssh/id_rsa.Your public key has been saved in /home/qingdujun/.ssh/id_rsa.pub.根据具体的提示，如我的是/home/qingdujun/.ssh/id_rsa.pub.将该文件内容。拷贝至，github.com&gt;settings&gt;SSH and GPGkeys−&gt;New SSH key References:[1] https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000[2] https://git-scm.com/book/zh/v1/Git-%E5%9F%BA%E7%A1%80-%E6%89%93%E6%A0%87%E7%AD%BE[3] http://www.ruanyifeng.com/blog/2014/06/git_remote.html[4] https://www.genuitec.com/products/myeclipse/download/[5] http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html[6] http://www.apache.org/dyn/closer.lua/lucene/java/7.4.0]]></content>
      <categories>
        <category>Artificial Intelligence</category>
      </categories>
      <tags>
        <tag>搜索引擎</tag>
        <tag>Lucene</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[字符串哈希算法——BKDRHash]]></title>
    <url>%2Fzh-CN%2Fstr-hash-func-bkdrhash.html</url>
    <content type="text"><![CDATA[BYVoid对常用的几种字符串哈希函数进行了一次小小的评测。其评测结果，按照得分从高到低依次为BKDRHash，APHash，DJBHash，JSHash，RSHash，SDBMHash，PJWHash，ELFHash。 其中，最优的字符串哈希算法BKDRHash函数实现如下：// BKDR Hash Functionunsigned int BKDRHash(const char *str)&#123; unsigned int seed = 131; // 31 131 1313 13131 131313 etc.. unsigned int hash = 0; while (*str)&#123; hash = hash * seed + (*str++); &#125; return (hash &amp; 0x7FFFFFFF);&#125; 比如，哈希字符串“Hello,World!”将会得到数字“632968537”。 References:[1] https://www.byvoid.com/zhs/blog/string-hash-compare，2018-09-18]]></content>
      <categories>
        <category>Mathematics</category>
      </categories>
      <tags>
        <tag>哈希</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fzh-CN%2Fhello-world.html</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new "My New Post" More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
